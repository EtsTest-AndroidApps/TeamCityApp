version: 2
jobs:
  build:
    working_directory: ~/TeamCityApp
    docker:
      - image: circleci/android:api-26-alpha
    steps:
      - checkout
      - restore_cache:
                key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download sdk
          command: |
           echo y | sdkmanager "tools" "platform-tools" "build-tools;26.0.1" "extras;android;m2repository" "platforms;android-26" "emulator" --verbose
           sdkmanager --update --verbose
      - run:
          name: Download dependencies
          command: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Copy google-serivices json mocks
          command: |
            mkdir -p app/src/mock/debug/
            cp mock-mockDebug-google-services.json ./app/src/mock/debug/google-services.json
            mkdir -p app/src/prod/debug/
            cp mock-prodDebug-google-services.json ./app/src/prod/debug/google-services.json
      - run:
          name: Prepare apks
          command: ./gradlew assembleMockDebug assembleMockDebugUnitTest assembleMockDebugAndroidTest
      - run:
          name: Run checks
          command: ./gradlew lintMockDebug pmd findbugs
      - run:
          name: Run unit tests
          command: ./gradlew testMockDebugUnitTest
      - run:
          name: Install Crcmod
          command: |
            sudo apt-get install gcc python-dev python-setuptools
            sudo easy_install -U pip
            sudo pip install -U crcmod
      - run:
          name: Install Gcloud
          command: |
            curl -L "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-166.0.0-linux-x86_64.tar.gz" | tar xz
            CLOUDSDK_CORE_DISABLE_PROMPTS=1 ./google-cloud-sdk/install.sh
      - run:
          name: Log in to Google Cloud Platform
          shell: /bin/bash -euo pipefail
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode > ${HOME}/client-secret.json
            ./google-cloud-sdk/bin/gcloud config set project $PROJECT_ID
            ./google-cloud-sdk/bin/gcloud --quiet components update
            ./google-cloud-sdk/bin/gcloud --quiet components install beta
            ./google-cloud-sdk/bin/gcloud auth activate-service-account $SERVICE_ACCOUNT --key-file ${HOME}/client-secret.json
      - run:
          name: Run UI tests
          shell: /bin/bash -euo pipefail
          command: |
            ./google-cloud-sdk/bin/gcloud firebase test android models list
            (./google-cloud-sdk/bin/gcloud firebase test android run --type instrumentation \
              --app app/build/outputs/apk/app-mock-debug.apk \
              --test app/build/outputs/apk/app-mock-debug-androidTest.apk \
              --device model=Nexus5X,version=23,locale=en,orientation=portrait \
              --timeout 15m \
              --results-bucket $PROJECT_ID \
              --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec" \
              --directories-to-pull /sdcard 2>&1 | tee firebase.log) || EXIT_CODE=$?

            RESULTS_BUCKET=$(sed -n 's|^.*\[https://console.developers.google.com/storage/browser/\([^]]*\).*|gs://\1|p' firebase.log)
            TEST_LAB_ARTIFACTS_DIRECTORY="app/build/circleci/artifacts/testlab"
            echo "Downloading from: ${RESULTS_BUCKET}"
            mkdir -p $TEST_LAB_ARTIFACTS_DIRECTORY
            chmod +x $TEST_LAB_ARTIFACTS_DIRECTORY
            ./google-cloud-sdk/bin/gsutil -m cp -n -R -Z "$RESULTS_BUCKET*" $TEST_LAB_ARTIFACTS_DIRECTORY
            
            exit ${EXIT_CODE:-0}
      - run:
          name: Copy Junit artifacts
          command: |
            mkdir -p app/build/circleci/test-results/
            find . -type f -regex ".*/build/test-results/testMockDebugUnitTest/.*xml" -exec cp {} app/build/circleci/test-results/ \;
            find app/build/circleci/artifacts/testlab -name "*.xml" -exec cp {} app/build/circleci/test-results/ \;
      - run:
          name: Copy UI tests coverage artifact
          command: find app/build/circleci/artifacts/testlab -name "*.ec" -exec cp {} app/build/ \;
      - run:
          name: Generate code coverage
          command: |
            ./gradlew generateCodeCoverageReport
            find . -type f -regex ".*/build/coverage/generateCodeCoverageReport/generateCodeCoverageReport.xml" -exec cp {} app/build/circleci/coverage/ \;
      - run:
          name: Send coverage to CodeCov
          command: bash <(curl -s https://codecov.io/bash) -f './app/build/coverage/generateCodeCoverageReport/generateCodeCoverageReport.xml'
      - run:
          name: Copy reports
          command: |
            mkdir -p app/build/circleci/artifacts/reports/lint/
            mv app/build/reports/lint-report/ app/build/circleci/artifacts/reports/lint/
            mkdir -p app/build/circleci/artifacts/reports/pmd/
            mv app/build/reports/pmd/ app/build/circleci/artifacts/reports/pmd/
            mkdir -p app/build/circleci/artifacts/reports/findbugs/
            mv app/build/reports/findbugs/ app/build/circleci/artifacts/reports/findbugs/
      - store_artifacts:
          path: app/build/circleci/artifacts
          destination: artifacts
      - store_test_results:
          path: app/build/circleci/test-results
